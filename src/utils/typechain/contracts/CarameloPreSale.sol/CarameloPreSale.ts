/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface CarameloPreSaleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addMultipleToWhitelist"
      | "addToWhitelist"
      | "buyTokens"
      | "currentPhase"
      | "endPreSale"
      | "initializePreSale"
      | "maxTokensBuy"
      | "owner"
      | "phaseRates"
      | "preSaleInitialized"
      | "removeFromWhitelist"
      | "renounceOwnership"
      | "token"
      | "tokensAvailable"
      | "tokensPurchasedByAddress"
      | "tokensRemaining"
      | "tokensSold"
      | "totalBNBReceived"
      | "transferOwnership"
      | "updateMaxTokensBuy"
      | "updatePhase"
      | "updatePhaseRate"
      | "whitelist"
      | "withdrawFunds"
      | "withdrawUnsoldTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddressWhitelisted"
      | "FundsWithdrawn"
      | "MaxTokensBuyUpdated"
      | "OwnershipTransferred"
      | "PhaseUpdated"
      | "PreSaleEnded"
      | "PreSaleInitialized"
      | "TokensPurchased"
      | "WhitelistUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addMultipleToWhitelist",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "buyTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endPreSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializePreSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTokensBuy",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "phaseRates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "preSaleInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensAvailable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensPurchasedByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensRemaining",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensSold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBNBReceived",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxTokensBuy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePhase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePhaseRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUnsoldTokens",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addMultipleToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endPreSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializePreSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTokensBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "phaseRates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "preSaleInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensPurchasedByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokensSold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBNBReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxTokensBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePhaseRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUnsoldTokens",
    data: BytesLike
  ): Result;
}

export namespace AddressWhitelistedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxTokensBuyUpdatedEvent {
  export type InputTuple = [newLimit: BigNumberish];
  export type OutputTuple = [newLimit: bigint];
  export interface OutputObject {
    newLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PhaseUpdatedEvent {
  export type InputTuple = [newPhase: BigNumberish];
  export type OutputTuple = [newPhase: bigint];
  export interface OutputObject {
    newPhase: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PreSaleEndedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PreSaleInitializedEvent {
  export type InputTuple = [tokensAvailable: BigNumberish];
  export type OutputTuple = [tokensAvailable: bigint];
  export interface OutputObject {
    tokensAvailable: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensPurchasedEvent {
  export type InputTuple = [
    buyer: AddressLike,
    amount: BigNumberish,
    cost: BigNumberish
  ];
  export type OutputTuple = [buyer: string, amount: bigint, cost: bigint];
  export interface OutputObject {
    buyer: string;
    amount: bigint;
    cost: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistUpdatedEvent {
  export type InputTuple = [account: AddressLike, status: boolean];
  export type OutputTuple = [account: string, status: boolean];
  export interface OutputObject {
    account: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CarameloPreSale extends BaseContract {
  connect(runner?: ContractRunner | null): CarameloPreSale;
  waitForDeployment(): Promise<this>;

  interface: CarameloPreSaleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addMultipleToWhitelist: TypedContractMethod<
    [accounts: AddressLike[]],
    [void],
    "nonpayable"
  >;

  addToWhitelist: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  buyTokens: TypedContractMethod<[], [void], "payable">;

  currentPhase: TypedContractMethod<[], [bigint], "view">;

  endPreSale: TypedContractMethod<[], [void], "nonpayable">;

  initializePreSale: TypedContractMethod<[], [void], "nonpayable">;

  maxTokensBuy: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  phaseRates: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  preSaleInitialized: TypedContractMethod<[], [boolean], "view">;

  removeFromWhitelist: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  token: TypedContractMethod<[], [string], "view">;

  tokensAvailable: TypedContractMethod<[], [bigint], "view">;

  tokensPurchasedByAddress: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  tokensRemaining: TypedContractMethod<[], [bigint], "view">;

  tokensSold: TypedContractMethod<[], [bigint], "view">;

  totalBNBReceived: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMaxTokensBuy: TypedContractMethod<
    [newLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePhase: TypedContractMethod<
    [newPhase: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePhaseRate: TypedContractMethod<
    [phase: BigNumberish, newRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  whitelist: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  withdrawFunds: TypedContractMethod<[], [void], "nonpayable">;

  withdrawUnsoldTokens: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addMultipleToWhitelist"
  ): TypedContractMethod<[accounts: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addToWhitelist"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buyTokens"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "currentPhase"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "endPreSale"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initializePreSale"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "maxTokensBuy"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "phaseRates"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "preSaleInitialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeFromWhitelist"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokensAvailable"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokensPurchasedByAddress"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokensRemaining"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokensSold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalBNBReceived"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMaxTokensBuy"
  ): TypedContractMethod<[newLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePhase"
  ): TypedContractMethod<[newPhase: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePhaseRate"
  ): TypedContractMethod<
    [phase: BigNumberish, newRate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawUnsoldTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AddressWhitelisted"
  ): TypedContractEvent<
    AddressWhitelistedEvent.InputTuple,
    AddressWhitelistedEvent.OutputTuple,
    AddressWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "MaxTokensBuyUpdated"
  ): TypedContractEvent<
    MaxTokensBuyUpdatedEvent.InputTuple,
    MaxTokensBuyUpdatedEvent.OutputTuple,
    MaxTokensBuyUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PhaseUpdated"
  ): TypedContractEvent<
    PhaseUpdatedEvent.InputTuple,
    PhaseUpdatedEvent.OutputTuple,
    PhaseUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PreSaleEnded"
  ): TypedContractEvent<
    PreSaleEndedEvent.InputTuple,
    PreSaleEndedEvent.OutputTuple,
    PreSaleEndedEvent.OutputObject
  >;
  getEvent(
    key: "PreSaleInitialized"
  ): TypedContractEvent<
    PreSaleInitializedEvent.InputTuple,
    PreSaleInitializedEvent.OutputTuple,
    PreSaleInitializedEvent.OutputObject
  >;
  getEvent(
    key: "TokensPurchased"
  ): TypedContractEvent<
    TokensPurchasedEvent.InputTuple,
    TokensPurchasedEvent.OutputTuple,
    TokensPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistUpdated"
  ): TypedContractEvent<
    WhitelistUpdatedEvent.InputTuple,
    WhitelistUpdatedEvent.OutputTuple,
    WhitelistUpdatedEvent.OutputObject
  >;

  filters: {
    "AddressWhitelisted(address)": TypedContractEvent<
      AddressWhitelistedEvent.InputTuple,
      AddressWhitelistedEvent.OutputTuple,
      AddressWhitelistedEvent.OutputObject
    >;
    AddressWhitelisted: TypedContractEvent<
      AddressWhitelistedEvent.InputTuple,
      AddressWhitelistedEvent.OutputTuple,
      AddressWhitelistedEvent.OutputObject
    >;

    "FundsWithdrawn(address,uint256)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;

    "MaxTokensBuyUpdated(uint256)": TypedContractEvent<
      MaxTokensBuyUpdatedEvent.InputTuple,
      MaxTokensBuyUpdatedEvent.OutputTuple,
      MaxTokensBuyUpdatedEvent.OutputObject
    >;
    MaxTokensBuyUpdated: TypedContractEvent<
      MaxTokensBuyUpdatedEvent.InputTuple,
      MaxTokensBuyUpdatedEvent.OutputTuple,
      MaxTokensBuyUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PhaseUpdated(uint8)": TypedContractEvent<
      PhaseUpdatedEvent.InputTuple,
      PhaseUpdatedEvent.OutputTuple,
      PhaseUpdatedEvent.OutputObject
    >;
    PhaseUpdated: TypedContractEvent<
      PhaseUpdatedEvent.InputTuple,
      PhaseUpdatedEvent.OutputTuple,
      PhaseUpdatedEvent.OutputObject
    >;

    "PreSaleEnded()": TypedContractEvent<
      PreSaleEndedEvent.InputTuple,
      PreSaleEndedEvent.OutputTuple,
      PreSaleEndedEvent.OutputObject
    >;
    PreSaleEnded: TypedContractEvent<
      PreSaleEndedEvent.InputTuple,
      PreSaleEndedEvent.OutputTuple,
      PreSaleEndedEvent.OutputObject
    >;

    "PreSaleInitialized(uint256)": TypedContractEvent<
      PreSaleInitializedEvent.InputTuple,
      PreSaleInitializedEvent.OutputTuple,
      PreSaleInitializedEvent.OutputObject
    >;
    PreSaleInitialized: TypedContractEvent<
      PreSaleInitializedEvent.InputTuple,
      PreSaleInitializedEvent.OutputTuple,
      PreSaleInitializedEvent.OutputObject
    >;

    "TokensPurchased(address,uint256,uint256)": TypedContractEvent<
      TokensPurchasedEvent.InputTuple,
      TokensPurchasedEvent.OutputTuple,
      TokensPurchasedEvent.OutputObject
    >;
    TokensPurchased: TypedContractEvent<
      TokensPurchasedEvent.InputTuple,
      TokensPurchasedEvent.OutputTuple,
      TokensPurchasedEvent.OutputObject
    >;

    "WhitelistUpdated(address,bool)": TypedContractEvent<
      WhitelistUpdatedEvent.InputTuple,
      WhitelistUpdatedEvent.OutputTuple,
      WhitelistUpdatedEvent.OutputObject
    >;
    WhitelistUpdated: TypedContractEvent<
      WhitelistUpdatedEvent.InputTuple,
      WhitelistUpdatedEvent.OutputTuple,
      WhitelistUpdatedEvent.OutputObject
    >;
  };
}
