/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CarameloInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "configureSwapProtocol"
      | "decimals"
      | "excludeFromFee"
      | "includeInFee"
      | "initializeTokenomics"
      | "isAccountExcludedFromFree"
      | "isSwapAndLiquifyEnabled"
      | "liquidityFee"
      | "maxTxAmount"
      | "name"
      | "numTokensSellToAddToLiquidity"
      | "owner"
      | "reflectionBalanceOf"
      | "renounceOwnership"
      | "setFees"
      | "setMaxTxAmount"
      | "setNumTokensSellToAddToLiquidity"
      | "setSwapAndLiquifyEnabled"
      | "swapAndLiquifyEnabled"
      | "symbol"
      | "taxFee"
      | "tokenomics"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "uniswapV2Pair"
      | "uniswapV2Router"
      | "updateUniswapV2Router"
      | "withdrawBNB"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ExcludedFromFee"
      | "FeesDistributed"
      | "FeesUpdated"
      | "IncludedInFee"
      | "LiquidityAdded"
      | "MaxTxAmountUpdated"
      | "NumTokensSellToAddToLiquidityUpdated"
      | "OwnershipTransferred"
      | "SwapAndLiquify"
      | "SwapAndLiquifyEnabledUpdated"
      | "TokensBurned"
      | "Transfer"
      | "UniswapConfigured"
      | "UniswapV2RouterUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "configureSwapProtocol",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "excludeFromFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "includeInFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeTokenomics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAccountExcludedFromFree",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSwapAndLiquifyEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTxAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numTokensSellToAddToLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reflectionBalanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTxAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNumTokensSellToAddToLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapAndLiquifyEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndLiquifyEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "taxFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenomics",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateUniswapV2Router",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBNB",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "configureSwapProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "includeInFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeTokenomics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccountExcludedFromFree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSwapAndLiquifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numTokensSellToAddToLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reflectionBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTxAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNumTokensSellToAddToLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapAndLiquifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndLiquifyEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taxFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenomics", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBNB",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExcludedFromFeeEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesDistributedEvent {
  export type InputTuple = [
    reflectionFee: BigNumberish,
    liquidityFee: BigNumberish,
    burnFee: BigNumberish
  ];
  export type OutputTuple = [
    reflectionFee: bigint,
    liquidityFee: bigint,
    burnFee: bigint
  ];
  export interface OutputObject {
    reflectionFee: bigint;
    liquidityFee: bigint;
    burnFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesUpdatedEvent {
  export type InputTuple = [_taxFee: BigNumberish, _liquidityFee: BigNumberish];
  export type OutputTuple = [_taxFee: bigint, _liquidityFee: bigint];
  export interface OutputObject {
    _taxFee: bigint;
    _liquidityFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncludedInFeeEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityAddedEvent {
  export type InputTuple = [
    tokenAmount: BigNumberish,
    ethAmount: BigNumberish,
    liquidity: BigNumberish
  ];
  export type OutputTuple = [
    tokenAmount: bigint,
    ethAmount: bigint,
    liquidity: bigint
  ];
  export interface OutputObject {
    tokenAmount: bigint;
    ethAmount: bigint;
    liquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxTxAmountUpdatedEvent {
  export type InputTuple = [newMaxTxAmount: BigNumberish];
  export type OutputTuple = [newMaxTxAmount: bigint];
  export interface OutputObject {
    newMaxTxAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NumTokensSellToAddToLiquidityUpdatedEvent {
  export type InputTuple = [newNumTokensSellToAddToLiquidity: BigNumberish];
  export type OutputTuple = [newNumTokensSellToAddToLiquidity: bigint];
  export interface OutputObject {
    newNumTokensSellToAddToLiquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapAndLiquifyEvent {
  export type InputTuple = [
    tokensSwapped: BigNumberish,
    ethReceived: BigNumberish,
    tokensAddedToLiquidity: BigNumberish
  ];
  export type OutputTuple = [
    tokensSwapped: bigint,
    ethReceived: bigint,
    tokensAddedToLiquidity: bigint
  ];
  export interface OutputObject {
    tokensSwapped: bigint;
    ethReceived: bigint;
    tokensAddedToLiquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapAndLiquifyEnabledUpdatedEvent {
  export type InputTuple = [enabled: boolean];
  export type OutputTuple = [enabled: boolean];
  export interface OutputObject {
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensBurnedEvent {
  export type InputTuple = [burner: AddressLike, burnAmount: BigNumberish];
  export type OutputTuple = [burner: string, burnAmount: bigint];
  export interface OutputObject {
    burner: string;
    burnAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UniswapConfiguredEvent {
  export type InputTuple = [router: AddressLike, pair: AddressLike];
  export type OutputTuple = [router: string, pair: string];
  export interface OutputObject {
    router: string;
    pair: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UniswapV2RouterUpdatedEvent {
  export type InputTuple = [newRouter: AddressLike];
  export type OutputTuple = [newRouter: string];
  export interface OutputObject {
    newRouter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Caramelo extends BaseContract {
  connect(runner?: ContractRunner | null): Caramelo;
  waitForDeployment(): Promise<this>;

  interface: CarameloInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  configureSwapProtocol: TypedContractMethod<
    [routerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  excludeFromFee: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  includeInFee: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  initializeTokenomics: TypedContractMethod<[], [void], "nonpayable">;

  isAccountExcludedFromFree: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  isSwapAndLiquifyEnabled: TypedContractMethod<[], [boolean], "view">;

  liquidityFee: TypedContractMethod<[], [bigint], "view">;

  maxTxAmount: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  numTokensSellToAddToLiquidity: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  reflectionBalanceOf: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setFees: TypedContractMethod<
    [_taxFee: BigNumberish, _liquidityFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxTxAmount: TypedContractMethod<
    [newMaxTxAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNumTokensSellToAddToLiquidity: TypedContractMethod<
    [newNumTokensSellToAddToLiquidity: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSwapAndLiquifyEnabled: TypedContractMethod<
    [_enabled: boolean],
    [void],
    "nonpayable"
  >;

  swapAndLiquifyEnabled: TypedContractMethod<[], [boolean], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  taxFee: TypedContractMethod<[], [bigint], "view">;

  tokenomics: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { wallet: string; percentage: bigint }],
    "view"
  >;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uniswapV2Pair: TypedContractMethod<[], [string], "view">;

  uniswapV2Router: TypedContractMethod<[], [string], "view">;

  updateUniswapV2Router: TypedContractMethod<
    [newRouter: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawBNB: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "configureSwapProtocol"
  ): TypedContractMethod<[routerAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "excludeFromFee"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "includeInFee"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initializeTokenomics"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isAccountExcludedFromFree"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSwapAndLiquifyEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "liquidityFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxTxAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "numTokensSellToAddToLiquidity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reflectionBalanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFees"
  ): TypedContractMethod<
    [_taxFee: BigNumberish, _liquidityFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxTxAmount"
  ): TypedContractMethod<[newMaxTxAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNumTokensSellToAddToLiquidity"
  ): TypedContractMethod<
    [newNumTokensSellToAddToLiquidity: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSwapAndLiquifyEnabled"
  ): TypedContractMethod<[_enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapAndLiquifyEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "taxFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenomics"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { wallet: string; percentage: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uniswapV2Pair"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "uniswapV2Router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateUniswapV2Router"
  ): TypedContractMethod<[newRouter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawBNB"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ExcludedFromFee"
  ): TypedContractEvent<
    ExcludedFromFeeEvent.InputTuple,
    ExcludedFromFeeEvent.OutputTuple,
    ExcludedFromFeeEvent.OutputObject
  >;
  getEvent(
    key: "FeesDistributed"
  ): TypedContractEvent<
    FeesDistributedEvent.InputTuple,
    FeesDistributedEvent.OutputTuple,
    FeesDistributedEvent.OutputObject
  >;
  getEvent(
    key: "FeesUpdated"
  ): TypedContractEvent<
    FeesUpdatedEvent.InputTuple,
    FeesUpdatedEvent.OutputTuple,
    FeesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "IncludedInFee"
  ): TypedContractEvent<
    IncludedInFeeEvent.InputTuple,
    IncludedInFeeEvent.OutputTuple,
    IncludedInFeeEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityAdded"
  ): TypedContractEvent<
    LiquidityAddedEvent.InputTuple,
    LiquidityAddedEvent.OutputTuple,
    LiquidityAddedEvent.OutputObject
  >;
  getEvent(
    key: "MaxTxAmountUpdated"
  ): TypedContractEvent<
    MaxTxAmountUpdatedEvent.InputTuple,
    MaxTxAmountUpdatedEvent.OutputTuple,
    MaxTxAmountUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "NumTokensSellToAddToLiquidityUpdated"
  ): TypedContractEvent<
    NumTokensSellToAddToLiquidityUpdatedEvent.InputTuple,
    NumTokensSellToAddToLiquidityUpdatedEvent.OutputTuple,
    NumTokensSellToAddToLiquidityUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SwapAndLiquify"
  ): TypedContractEvent<
    SwapAndLiquifyEvent.InputTuple,
    SwapAndLiquifyEvent.OutputTuple,
    SwapAndLiquifyEvent.OutputObject
  >;
  getEvent(
    key: "SwapAndLiquifyEnabledUpdated"
  ): TypedContractEvent<
    SwapAndLiquifyEnabledUpdatedEvent.InputTuple,
    SwapAndLiquifyEnabledUpdatedEvent.OutputTuple,
    SwapAndLiquifyEnabledUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokensBurned"
  ): TypedContractEvent<
    TokensBurnedEvent.InputTuple,
    TokensBurnedEvent.OutputTuple,
    TokensBurnedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "UniswapConfigured"
  ): TypedContractEvent<
    UniswapConfiguredEvent.InputTuple,
    UniswapConfiguredEvent.OutputTuple,
    UniswapConfiguredEvent.OutputObject
  >;
  getEvent(
    key: "UniswapV2RouterUpdated"
  ): TypedContractEvent<
    UniswapV2RouterUpdatedEvent.InputTuple,
    UniswapV2RouterUpdatedEvent.OutputTuple,
    UniswapV2RouterUpdatedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ExcludedFromFee(address)": TypedContractEvent<
      ExcludedFromFeeEvent.InputTuple,
      ExcludedFromFeeEvent.OutputTuple,
      ExcludedFromFeeEvent.OutputObject
    >;
    ExcludedFromFee: TypedContractEvent<
      ExcludedFromFeeEvent.InputTuple,
      ExcludedFromFeeEvent.OutputTuple,
      ExcludedFromFeeEvent.OutputObject
    >;

    "FeesDistributed(uint256,uint256,uint256)": TypedContractEvent<
      FeesDistributedEvent.InputTuple,
      FeesDistributedEvent.OutputTuple,
      FeesDistributedEvent.OutputObject
    >;
    FeesDistributed: TypedContractEvent<
      FeesDistributedEvent.InputTuple,
      FeesDistributedEvent.OutputTuple,
      FeesDistributedEvent.OutputObject
    >;

    "FeesUpdated(uint256,uint256)": TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;
    FeesUpdated: TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;

    "IncludedInFee(address)": TypedContractEvent<
      IncludedInFeeEvent.InputTuple,
      IncludedInFeeEvent.OutputTuple,
      IncludedInFeeEvent.OutputObject
    >;
    IncludedInFee: TypedContractEvent<
      IncludedInFeeEvent.InputTuple,
      IncludedInFeeEvent.OutputTuple,
      IncludedInFeeEvent.OutputObject
    >;

    "LiquidityAdded(uint256,uint256,uint256)": TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;
    LiquidityAdded: TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;

    "MaxTxAmountUpdated(uint256)": TypedContractEvent<
      MaxTxAmountUpdatedEvent.InputTuple,
      MaxTxAmountUpdatedEvent.OutputTuple,
      MaxTxAmountUpdatedEvent.OutputObject
    >;
    MaxTxAmountUpdated: TypedContractEvent<
      MaxTxAmountUpdatedEvent.InputTuple,
      MaxTxAmountUpdatedEvent.OutputTuple,
      MaxTxAmountUpdatedEvent.OutputObject
    >;

    "NumTokensSellToAddToLiquidityUpdated(uint256)": TypedContractEvent<
      NumTokensSellToAddToLiquidityUpdatedEvent.InputTuple,
      NumTokensSellToAddToLiquidityUpdatedEvent.OutputTuple,
      NumTokensSellToAddToLiquidityUpdatedEvent.OutputObject
    >;
    NumTokensSellToAddToLiquidityUpdated: TypedContractEvent<
      NumTokensSellToAddToLiquidityUpdatedEvent.InputTuple,
      NumTokensSellToAddToLiquidityUpdatedEvent.OutputTuple,
      NumTokensSellToAddToLiquidityUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SwapAndLiquify(uint256,uint256,uint256)": TypedContractEvent<
      SwapAndLiquifyEvent.InputTuple,
      SwapAndLiquifyEvent.OutputTuple,
      SwapAndLiquifyEvent.OutputObject
    >;
    SwapAndLiquify: TypedContractEvent<
      SwapAndLiquifyEvent.InputTuple,
      SwapAndLiquifyEvent.OutputTuple,
      SwapAndLiquifyEvent.OutputObject
    >;

    "SwapAndLiquifyEnabledUpdated(bool)": TypedContractEvent<
      SwapAndLiquifyEnabledUpdatedEvent.InputTuple,
      SwapAndLiquifyEnabledUpdatedEvent.OutputTuple,
      SwapAndLiquifyEnabledUpdatedEvent.OutputObject
    >;
    SwapAndLiquifyEnabledUpdated: TypedContractEvent<
      SwapAndLiquifyEnabledUpdatedEvent.InputTuple,
      SwapAndLiquifyEnabledUpdatedEvent.OutputTuple,
      SwapAndLiquifyEnabledUpdatedEvent.OutputObject
    >;

    "TokensBurned(address,uint256)": TypedContractEvent<
      TokensBurnedEvent.InputTuple,
      TokensBurnedEvent.OutputTuple,
      TokensBurnedEvent.OutputObject
    >;
    TokensBurned: TypedContractEvent<
      TokensBurnedEvent.InputTuple,
      TokensBurnedEvent.OutputTuple,
      TokensBurnedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "UniswapConfigured(address,address)": TypedContractEvent<
      UniswapConfiguredEvent.InputTuple,
      UniswapConfiguredEvent.OutputTuple,
      UniswapConfiguredEvent.OutputObject
    >;
    UniswapConfigured: TypedContractEvent<
      UniswapConfiguredEvent.InputTuple,
      UniswapConfiguredEvent.OutputTuple,
      UniswapConfiguredEvent.OutputObject
    >;

    "UniswapV2RouterUpdated(address)": TypedContractEvent<
      UniswapV2RouterUpdatedEvent.InputTuple,
      UniswapV2RouterUpdatedEvent.OutputTuple,
      UniswapV2RouterUpdatedEvent.OutputObject
    >;
    UniswapV2RouterUpdated: TypedContractEvent<
      UniswapV2RouterUpdatedEvent.InputTuple,
      UniswapV2RouterUpdatedEvent.OutputTuple,
      UniswapV2RouterUpdatedEvent.OutputObject
    >;
  };
}
